// Generated by Dagger (https://dagger.dev).
package com.example.list.universities.presentation;

import com.example.list.universities.data.db.DataStoreManager;
import com.example.list.universities.domain.UniversitiesUsecase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UniversityViewModel_Factory implements Factory<UniversityViewModel> {
  private final Provider<UniversitiesUsecase> usecaseProvider;

  private final Provider<DataStoreManager> dbProvider;

  public UniversityViewModel_Factory(Provider<UniversitiesUsecase> usecaseProvider,
      Provider<DataStoreManager> dbProvider) {
    this.usecaseProvider = usecaseProvider;
    this.dbProvider = dbProvider;
  }

  @Override
  public UniversityViewModel get() {
    return newInstance(usecaseProvider.get(), dbProvider.get());
  }

  public static UniversityViewModel_Factory create(Provider<UniversitiesUsecase> usecaseProvider,
      Provider<DataStoreManager> dbProvider) {
    return new UniversityViewModel_Factory(usecaseProvider, dbProvider);
  }

  public static UniversityViewModel newInstance(UniversitiesUsecase usecase, DataStoreManager db) {
    return new UniversityViewModel(usecase, db);
  }
}
