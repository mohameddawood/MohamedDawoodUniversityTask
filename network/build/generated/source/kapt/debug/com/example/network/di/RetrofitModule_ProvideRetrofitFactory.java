// Generated by Dagger (https://dagger.dev).
package com.example.network.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RetrofitModule_ProvideRetrofitFactory implements Factory<Retrofit.Builder> {
  private final Provider<OkHttpClient> httpClientProvider;

  public RetrofitModule_ProvideRetrofitFactory(Provider<OkHttpClient> httpClientProvider) {
    this.httpClientProvider = httpClientProvider;
  }

  @Override
  public Retrofit.Builder get() {
    return provideRetrofit(httpClientProvider.get());
  }

  public static RetrofitModule_ProvideRetrofitFactory create(
      Provider<OkHttpClient> httpClientProvider) {
    return new RetrofitModule_ProvideRetrofitFactory(httpClientProvider);
  }

  public static Retrofit.Builder provideRetrofit(OkHttpClient httpClient) {
    return Preconditions.checkNotNullFromProvides(RetrofitModule.INSTANCE.provideRetrofit(httpClient));
  }
}
