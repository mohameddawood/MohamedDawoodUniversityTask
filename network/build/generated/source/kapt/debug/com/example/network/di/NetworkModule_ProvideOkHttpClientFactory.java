// Generated by Dagger (https://dagger.dev).
package com.example.network.di;

import android.content.Context;
import com.task.football.base.network.NetworkManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<Context> contextProvider;

  private final Provider<NetworkManager> networkManagerProvider;

  public NetworkModule_ProvideOkHttpClientFactory(Provider<Context> contextProvider,
      Provider<NetworkManager> networkManagerProvider) {
    this.contextProvider = contextProvider;
    this.networkManagerProvider = networkManagerProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(contextProvider.get(), networkManagerProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(Provider<Context> contextProvider,
      Provider<NetworkManager> networkManagerProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(contextProvider, networkManagerProvider);
  }

  public static OkHttpClient provideOkHttpClient(Context context, NetworkManager networkManager) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideOkHttpClient(context, networkManager));
  }
}
